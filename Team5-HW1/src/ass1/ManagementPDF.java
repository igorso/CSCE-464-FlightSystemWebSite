package ass1;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Date;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import beans.*;

// TODO: Auto-generated Javadoc
/**
 * The Class ManagementPDF.
 * This class works perfectly when it is launched as a classic java application, but creates an exception when it is loaded by tomcat servlet
 */
public class ManagementPDF {
	
  	/** The cat font. */
  	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
	      Font.BOLD);
	  
  	/** The red font. */
  	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
	      Font.NORMAL, BaseColor.RED);
	  
  	/** The sub font. */
  	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
	      Font.BOLD);
	  
  	/** The small bold. */
  	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
	      Font.BOLD);
	  
	  
	 
	  /**
  	 * The main method.
  	 * Used only for testing.
  	 *
  	 * @param args the arguments
  	 */
  	public static void main(String[] args) {
		  DetailedFlightBean detailsF=new DetailedFlightBean();
		  UserBean user=new UserBean();
		  //createPDF(detailsF,user,"C:\\Users\\stanislas\\workspace\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp1\\wtpwebapps\\Team5-HW2\\FirstPdf.pdf");
		  
	  }
	 
	  
	  /**
  	 * Prints the pdf using the beans informations.
  	 * This function does not work when it is called by a servlet! (We don't know why)
  	 * @param details the details
  	 * @param user the user
  	 * @param path the path
  	 */
  	public static void createPDF(ArrayList<DetailedFlightBean> shoppingCart,UserBean user,String path,String name, String age,String sex)
	  {
		 System.out.println("We create a PDF at this emplacement "+path);
		  try {
		      Document document = new Document();
		      PdfWriter.getInstance(document, new FileOutputStream( path));
		      document.open();
		      addMetaData(document);
		      addTitlePage(document);
		      addInfos(document, name,age,sex);
		  
		      for (DetailedFlightBean fInfo : shoppingCart) {	
		   document.add(new Paragraph(" "));
		      createTable(document, fInfo, user);
		      }
		      document.close();
		    } catch (Exception e) {
		      e.printStackTrace();
		    }
	  }
	  
	
	 /**
	 * Adds the meta data.
	 *iText allows to add metadata to the PDF which can be viewed in Adobe
	 *Reader
	 * under File -> Properties
	 * @param document the document
	 */
  	private static void addMetaData(Document document) {
	    document.addTitle("Booking Summary");	  
	    document.addAuthor("Flight website");
	    document.addCreator("Flight website");
	   
	  }

	  /**
  	 * Adds the title page.
  	 *
  	 * @param document the document
  	 * @throws DocumentException the document exception
  	 */
  	private static void addTitlePage(Document document)
	      throws DocumentException {
	    Paragraph preface = new Paragraph();
	    // We add one empty line
	    addEmptyLine(preface, 1);
	    // Lets write a big header
	    preface.add(new Paragraph("Thank you to book with our compagny", catFont));
	    addEmptyLine(preface, 1);
	    // Will create: Report generated by: _name, _date
	    preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
	        smallBold));
	    addEmptyLine(preface, 1);
	    document.add(preface);
	  }


	  /**
  	 * Creates the table.
  	 *
  	 * @param subCatPart the sub cat part
  	 * @param details the details
  	 * @param user the user
  	 * @throws BadElementException the bad element exception
  	 */
  	private static void createTable(Document subCatPart, DetailedFlightBean details,UserBean user)
	      throws BadElementException {
	    PdfPTable table = new PdfPTable(2);

	    // t.setBorderColor(BaseColor.GRAY);
	    // t.setPadding(4);
	    // t.setSpacing(4);
	    // t.setBorderWidth(1);

	    PdfPCell c1 = new PdfPCell(new Phrase("Flight Information"));
	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(c1);

	    c1 = new PdfPCell(new Phrase("Value"));
	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(c1);

	   
	    table.setHeaderRows(1);
	    
	    table.addCell("User name");
	    table.addCell(user.getEmail());
	    
	    table.addCell("Flight ID");
	    table.addCell(String.valueOf(details.getId()) );
	    
	    table.addCell("Plane ID");
	    table.addCell(String.valueOf(details.getPlane()) );
	    
	    table.addCell("Operator");
	    table.addCell(details.getOperator());

	    table.addCell("Cost per passenger");
	    table.addCell(String.valueOf(details.getCost()) );
	   
	    table.addCell("Number of seats");
	    table.addCell(String.valueOf(details.getNumberOfSeat()) );
	    
	    table.addCell("From ");
	    table.addCell(details.getSource());
	    
	    table.addCell("To");
	    table.addCell(details.getDestination());
	    
	    table.addCell("Arrival");
	    table.addCell(details.getArrival());
	    
	    table.addCell("Departure");
	    table.addCell(details.getDeparture());

	    try {
			subCatPart.add(table);
		} catch (DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	  }

  	
  	private static void addInfos(Document subCatPart, String name, String age,String sex)
  	      throws BadElementException {
  	    PdfPTable table = new PdfPTable(2);

  	    // t.setBorderColor(BaseColor.GRAY);
  	    // t.setPadding(4);
  	    // t.setSpacing(4);
  	    // t.setBorderWidth(1);

  	    PdfPCell c1 = new PdfPCell(new Phrase("Passenger information"));
  	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
  	    table.addCell(c1);

  	    c1 = new PdfPCell(new Phrase("Value"));
  	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
  	    table.addCell(c1);
  	    
  	    table.setHeaderRows(1);
  	    
  	    table.addCell("name");
  	    table.addCell(name);
  	    
  	    table.addCell("age");
  	    table.addCell(age );
  	    
  	    table.addCell("sex");
  	    table.addCell(sex);
  	  
  	    
  	    try {
  			subCatPart.add(table);
  		} catch (DocumentException e) {
  			// TODO Auto-generated catch block
  			e.printStackTrace();
  		}

  	  }

  	
  	
	 
	  /**
  	 * Adds the empty line.
  	 *
  	 * @param paragraph the paragraph
  	 * @param number the number
  	 */
  	private static void addEmptyLine(Paragraph paragraph, int number) {
	    for (int i = 0; i < number; i++) {
	      paragraph.add(new Paragraph(" "));
	    }
	  }
}
