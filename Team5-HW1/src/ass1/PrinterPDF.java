package ass1;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;


import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.itextpdf.text.Document;
import com.itextpdf.text.pdf.PdfWriter;


/*
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
*/
import beans.DetailedFlightBean;
import beans.UserBean;

/**
 * Servlet implementation class PrinterPDF
 */
public class PrinterPDF extends HttpServlet {
	private static final long serialVersionUID = 1L;
	/*
	 private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
		      Font.BOLD);
		  private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
		      Font.NORMAL, BaseColor.RED);
		  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
		      Font.BOLD);
		  private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
		      Font.BOLD);
		  private DetailedFlightBean details=null;
      */
    /**
     * @see HttpServlet#HttpServlet()
     */
    public PrinterPDF() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doPost(request,response);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException,IOException {
		System.out.println("Do post of printer");
		//Get the data from the session:
		//HttpSession session = request.getSession();
		DetailedFlightBean flightDetail = new DetailedFlightBean();//(DetailedFlightBean) session.getAttribute("selectedFlight");		
		UserBean userBean = new UserBean();//(UserBean) session.getAttribute("userBean");
		
		//Create the PDF with the beans:
		String pdfFileName = "FirstPdf.pdf";
		String contextPath = getServletContext().getRealPath(File.separator);
		printPDF(flightDetail, userBean,contextPath + pdfFileName);
		System.out.println("End of the PDF print");
		
		//Display it on the screen:
		//System.out.println(contextPath);
		File pdfFile = new File(contextPath + pdfFileName);

		response.setContentType("application/pdf");
		response.addHeader("Content-Disposition", "attachment; filename=" + pdfFileName);
		response.setContentLength((int) pdfFile.length());

		FileInputStream fileInputStream = new FileInputStream(pdfFile);
		OutputStream responseOutputStream = response.getOutputStream();
		int bytes;
		while ((bytes = fileInputStream.read()) != -1) {
			responseOutputStream.write(bytes);
		}

	}
	
	void printPDF(DetailedFlightBean details,UserBean user,String path)
	  {
		
		System.out.println("We will create the pdf file with the bookinge We are in the servlet"+path);
		ManagementPDF.printPDF(details, user,path);
		/*
		try {
		      Document document = new Document();
		      PdfWriter.getInstance(document, new FileOutputStream(contextPath + pdfFileName));
		      System.out.println(contextPath + pdfFileName);
		      document.open();
		      //addMetaData(document);
		      //addTitlePage(document);
		      //createTable(document, details, user);
		      document.close();
		    } catch (Exception e) {
		      e.printStackTrace();
		    }*/
	  }
	 
	/*
	  // iText allows to add metadata to the PDF which can be viewed in your Adobe
	  // Reader
	  // under File -> Properties
	  private static void addMetaData(Document document) {
	    document.addTitle("Booking Summary");	  
	    document.addAuthor("Flight website");
	    document.addCreator("Flight website");
	    
	  }*/
	/*
	private static void addTitlePage(Document document)
		      throws DocumentException {
		    Paragraph preface = new Paragraph();
		    // We add one empty line
		    addEmptyLine(preface, 1);
		    // Lets write a big header
		    preface.add(new Paragraph("Thank you to book with our compagny", catFont));

		    addEmptyLine(preface, 1);
		    // Will create: Report generated by: _name, _date
		    preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		        smallBold));
		    addEmptyLine(preface, 1);
		    document.add(preface);
		  }


		  private static void createTable(Document subCatPart, DetailedFlightBean details,UserBean user)
		      throws BadElementException {
		    PdfPTable table = new PdfPTable(2);

		    // t.setBorderColor(BaseColor.GRAY);
		    // t.setPadding(4);
		    // t.setSpacing(4);
		    // t.setBorderWidth(1);

		    PdfPCell c1 = new PdfPCell(new Phrase("Item"));
		    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		    table.addCell(c1);

		    c1 = new PdfPCell(new Phrase("Value"));
		    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		    table.addCell(c1);

		   
		    table.setHeaderRows(1);
		    
		    table.addCell("User name");
		    table.addCell(user.getEmail());
		    
		    table.addCell("Flight ID");
		    table.addCell(String.valueOf(details.getId()) );
		    
		    table.addCell("Plane ID");
		    table.addCell(String.valueOf(details.getPlane()) );
		    
		    table.addCell("Operator");
		    table.addCell(details.getOperator());

		    table.addCell("Cost per passenger");
		    table.addCell(String.valueOf(details.getCost()) );
		   
		    table.addCell("Number of seats");
		    table.addCell(String.valueOf(details.getNumberOfSeat()) );
		    
		    table.addCell("From ");
		    table.addCell(details.getSource());
		    
		    table.addCell("To");
		    table.addCell(details.getDestination());
		    
		    table.addCell("Arrival");
		    table.addCell(details.getArrival());
		    
		    table.addCell("Departure");
		    table.addCell(details.getDeparture());

		    try {
				subCatPart.add(table);
			} catch (DocumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		  }

		 
		  private static void addEmptyLine(Paragraph paragraph, int number) {
		    for (int i = 0; i < number; i++) {
		      paragraph.add(new Paragraph(" "));
		    }
		  }
		  */

}
